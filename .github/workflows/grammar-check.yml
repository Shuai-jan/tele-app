name: Proselint Grammar Check for Modified .mdx Files

on:
  pull_request:
    paths:
      - '**/*.mdx'  # Target all .mdx files in the repository

jobs:
  proselint:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to ensure all branches are available
          ref: ${{ github.head_ref }}

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'  # Specify the required Python version

      # Step 3: Install Proselint
      - name: Install Proselint
        run: |
          python -m pip install --upgrade pip
          pip install proselint

      # Step 4: Identify Modified .mdx Files
      - name: Identify Modified .mdx Files
        id: find_files
        run: |
          git diff --name-only --diff-filter=AM origin/${{ github.base_ref }}...${{ github.head_ref }} -- '*.mdx' > modified_files.txt
          if [ -s modified_files.txt ]; then
            echo "Modified .mdx files detected:"
            cat modified_files.txt
            echo "files=$(cat modified_files.txt | paste -sd ' ' -)" >> $GITHUB_OUTPUT
          else
            echo "No modified .mdx files detected."
            echo "files=" >> $GITHUB_OUTPUT
          fi

      # Step 5: Run Proselint and Fail on Issues
      - name: Run Proselint
        if: steps.find_files.outputs.files != ''
        run: |
          set -e
          issue_found=0  # Track if any issues are detected
          for file in ${{ steps.find_files.outputs.files }}; do
            echo "Linting $file"
            proselint "$file" > "${file}.proselint_report" || true  # Capture Proselint output
            if [ -s "${file}.proselint_report" ]; then
              echo "Issues found in $file:"
              cat "${file}.proselint_report"
              issue_found=1  # Mark that issues were detected
            else
              echo "No issues found in $file."
            fi
          done
          if [ $issue_found -eq 1 ]; then
            echo "Proselint detected issues."
            exit 1  # Fail the workflow
          fi
